#!/bin/sh
DOCKER_LOGS_PATH=${HOME}/dockerlogs
if [ ! -d "$DOCKER_LOGS_PATH" ]; then
    mkdir -p ${DOCKER_LOGS_PATH}
fi
DOCKER_JUPYTER_NOTEBOOK_BIND=${HOME}/Desktop/venv/artifacts

docker-notebook()
{
    # mount bind volue
    container_id=$(docker ps -aq --filter name='notebooks')
    if [ -n "$container_id" ]; then
       state=$(docker inspect --format '{{.State.Running}}' notebooks 2>/dev/null)
       if [ "$state" = "false" ]; then
	echo "Container $container_id created but not running. Re-creating"
	docker rm $container_id
       fi
    fi

   #If docker image is running open the localhost:8888
    if docker container inspect --format '{{.State.Running}}' notebooks 2>/dev/null | grep -q 'true'; then
        echo "Env in docker image is running... Opening http://localhost:8888"
        xdg-open http://localhost:8888
    else
	echo "Starting jupyter notebooks environment"
        docker run --gpus=all -d -v ${DOCKER_JUPYTER_NOTEBOOK_BIND}:/venv/ \
        --name notebooks -e WANDB_API_KEY=${WANDB_API_KEY} -p 8888:8888 notebooks:latest
        xdg-open http://localhost:8888
    fi
    docker logs -f notebooks &> $DOCKER_LOGS_PATH/notebooks.log &
}

docker-postgres()
{
    VOLUME_NAME="postgresv"
   #If docker image is running connect to postgres at default port
    container_id=$(docker ps -aq --filter name='postgres')
    if [ -n "$container_id" ]; then
       state=$(docker inspect --format '{{.State.Running}}' postgres 2>/dev/null)
       if [ "$state" = "false" ]; then
	echo "Container $container_id created but not running. Re-creating"
	docker rm $container_id
       fi
    fi

    if docker container inspect --format '{{.State.Running}}' postgres 2>/dev/null | grep -q 'true'; then
        echo "Postgres docker image is running... Connecting to psql"
    else
        if docker volume inspect $VOLUME_NAME &> /dev/null; then
            echo "Volume $VOLUME_NAME already exists."
        else
            echo "Creating volume $VOLUME_NAME ..."
            docker volume create --name postgresv
        fi
        echo "Starting psql server..."
        docker run --name postgres -p 5432:5432 -v postgresv:/var/lib/postgresql/data \
        -e POSTGRES_USER=root -e POSTGRES_DB=postgresdb -e POSTGRES_PASSWORD=root \
        -d postgres
        sleep 2
    fi
    export PGPASSWORD=root
    psql -h localhost -p 5432 -U root -d postgresdb
}

docker-mysql()
{
    VOLUME_NAME="mysqlv"

    container_id=$(docker ps -aq --filter name='mysql-server')
    if [ -n "$container_id" ]; then
        state=$(docker inspect --format '{{.State.Running}}' mysql-server 2>/dev/null)
       if [ "$state" = "false" ]; then
        echo "Container $container_id created but not running. Re-creating"
        docker rm $container_id
       fi
    fi

    #If docker image is running connect to postgres at default port
    if docker container inspect --format '{{.State.Running}}' mysql-server 2>/dev/null | grep -q 'true'; then
        echo "Mysql-server docker image is running... Connecting to mysql"
    else
        if docker volume inspect $VOLUME_NAME &> /dev/null; then
            echo "Volume $VOLUME_NAME already exists."
        else
            echo "Creating volume $VOLUME_NAME ..."
            docker volume create --name mysqlv
        fi
        echo "Starting mysql  server..."
        docker run --name mysql-server -p 3307:3306 -v mysqlv:/var/lib/mysql \
        -e MYSQL_ROOT_PASSWORD='root' -d mysql:latest
        sleep 2
    fi
    mysql --host=127.0.0.1 --port=3307 -u root -p'root'
}
